# -*- coding: utf-8 -*-
"""Movie_recommendor app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12GdUJEfVnbCP1CsTEKp04X4JxA_iNp-b

### Install dependencies and download files
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install streamlit
!pip install tmdbv3api
!npm install localtunnel

!gdown 1AwA69OWgoFikw-y0gg87c7MCUADYUd9p #movies.csv
!gdown 1kAbqGD-3RrfacTiu7bVegCkPF9jCfA5T #similarity.npy



"""import pandas as pd
from requests import *
import json
url="https://api.themoviedb.org/3/trending/movie/day?api_key=b7a156ee94920eefecc80807378a46df&language=en-US"

response=get(url)


pd.set_option('display.max_columns', None)  # Display all columns
pd.set_option('display.width', None)  # Remove width constraint

movies = pd.DataFrame()

for i in range(1, 500):
    response = requests.get("https://api.themoviedb.org/3/trending/movie/day?api_key=b7a156ee94920eefecc80807378a46df&language=en-US&page={}".format(i))
    temp_ = pd.DataFrame(response.json()['results'])
    movies = pd.concat([movies, temp_], ignore_index=True)

movies.reset_index(drop=True, inplace=True)
movies

### Import libraries
"""

import pandas as pd
import difflib
import numpy as np

"""### Movie recommendation logic"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile movie.py
# 
# import pandas as pd
# import numpy as np
# import difflib
# 
# # Load the movies data from a CSV file
# movies_data = pd.read_csv("movies.csv")
# 
# # Convert the 'title' column of the movies data to a list
# list_of_movies = movies_data['title'].tolist()
# 
# # Load the similarity scores from a numpy file
# similarity_scores = np.load('similarity.npy')
# 
# def get_movie_recommendations(movie_name, top_n=5):
#     # Find the closest match to the given movie name
#     closest_match = difflib.get_close_matches(movie_name, list_of_movies)[0]
# 
#     # Get the index of the closest matched movie
#     movie_index = movies_data[movies_data.title == closest_match]['index'].values[0]
# 
#     # Get the similarity scores for the movie at the given index
#     similarity_scores_list = list(enumerate(similarity_scores[movie_index]))
# 
#     # Sort the similarity scores in descending order
#     sorted_scores = sorted(similarity_scores_list, key=lambda x: x[1], reverse=True)
# 
#     # Exclude the movie itself from recommended movies
#     sorted_scores = [score for score in sorted_scores if score[0] != movie_index]
# 
#     # Get the indices of the top n similar movies
#     sorted_movie_indices = [i[0] for i in sorted_scores[:top_n]]
# 
#     # Get the titles of the top n similar movies
#     recommended_movies = movies_data[movies_data.index.isin(sorted_movie_indices)]['title'].tolist()
# 
#     return recommended_movies

"""### Streamlit App"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from movie import get_movie_recommendations, list_of_movies
# import random
# 
# # Set up Streamlit app
# st.title('Movie Recommender System')
# st.header('🎥🍿 Welcome to the Movie Recommender System! 🍿🎥')
# st.markdown('Created by: **Sanskar**')
# 
# # Select the input type (dropdown or text input)
# input_type = st.selectbox("🎯 How would you like to discover a movie?", ["🎬 Lights, Camera, Action! Select a movie", "🔍 Let's dive in! Enter a movie name"])
# 
# # Randomly select a movie name for the dropdown list
# random_movie = random.choice(list_of_movies)
# 
# # Handle input based on the selected input type
# if input_type == "🎬 Lights, Camera, Action! Select a movie":
#     movie_name = st.selectbox("🌟 Lights are shining! Pick a movie from the stars", list_of_movies)
# else:
#     movie_name = st.text_input("🔍 Unleash your movie knowledge! Enter a movie name", '')
# 
# submit_button = st.button('🚀 Show Recommendations')
# 
# if submit_button:
#     top_n = 5
#     recommended_movies = get_movie_recommendations(movie_name, top_n)
# 
#     if len(recommended_movies) == 0:
#         st.error("❌ Oops! No similar movies found. Time to explore something new!")
#     else:
#         st.success("🎉 Hooray! Movie gems await you!")
# 
#         st.markdown(f'🔥 Top {top_n} movies similar to **{movie_name}**:')
# 
#         for idx, recommended_movie in enumerate(recommended_movies):
#             # Generate random emojis to make it more fun
#             emojis = ['🍿', '🎬', '🌟', '🎉', '👏', '🔥']
#             random_emoji = emojis[idx % len(emojis)]
# 
#             st.write(f'{idx+1}. {recommended_movie} {random_emoji}')
#

# Commented out IPython magic to ensure Python compatibility.
# ## with image
# %%writefile app_v2.py
# import streamlit as st
# from movie import get_movie_recommendations, list_of_movies
# from tmdbv3api import TMDb
# from tmdbv3api import Movie
# import random
# from PIL import Image
# 
# # Set up Streamlit app
# st.title('Movie Recommender System')
# st.header('🎥🍿 Welcome to the Movie Recommender System! 🍿🎥')
# st.markdown('Created by: **Sanskar**')
# 
# # Select the input type (dropdown or text input)
# input_type = st.selectbox("🎯 How would you like to discover a movie?", ["🎬 Lights, Camera, Action! Select a movie", "🔍 Let's dive in! Enter a movie name"])
# 
# # Handle input based on the selected input type
# if input_type == "🎬 Lights, Camera, Action! Select a movie":
#     movie_name = st.selectbox("🌟 Lights are shining! Pick a movie from the stars", list_of_movies)
# else:
#     movie_name = st.text_input("🔍 Unleash your movie knowledge! Enter a movie name", '')
# 
# submit_button = st.button('🚀 Show Recommendations')
# 
# # Configure TMDB API
# tmdb = TMDb()
# tmdb.api_key = '1609d2dd35be5687a4b1514b46ee4924'  # Replace with your TMDB API key
# 
# if submit_button:
#     top_n = 5
#     recommended_movies = get_movie_recommendations(movie_name, top_n)
# 
#     if len(recommended_movies) == 0:
#         st.error("❌ Oops! No similar movies found. Time to explore something new!")
#     else:
#         st.success("🎉 Hooray! Movie gems await you!")
# 
#         st.markdown(f'🔥 Top {top_n} movies similar to **{movie_name}**:')
# 
#         # Create two columns for movie posters and titles
#         cols = st.columns(top_n)
# 
#         for idx, recommended_movie in enumerate(recommended_movies):
#             movie = Movie()
#             search_results = movie.search(recommended_movie)
#             if len(search_results) > 0:
#                 movie_id = search_results[0].id
#                 movie_details = movie.details(movie_id)
#                 poster_path = movie_details.poster_path
#                 if poster_path:
#                     poster_url = f"https://image.tmdb.org/t/p/w200/{poster_path}"
#                     with cols[idx]:
#                         st.image(poster_url, width=140)
#                         st.markdown(f"<p style='text-align: center;'><b>{recommended_movie}</b></p>", unsafe_allow_html=True)
# 
#                 else:
#                     st.markdown(f'**{idx+1}. {recommended_movie}**')
#             else:
#                 st.markdown(f'**{idx+1}. {recommended_movie}**')
#

"""### Run app using localtunnel"""

!streamlit run /content/app_v2.py &>/content/logs.txt &

#check logs.txt for IP, use external IP without port
!npx localtunnel --port 8501